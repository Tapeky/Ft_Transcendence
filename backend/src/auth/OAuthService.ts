import { UserRepository } from '../repositories/UserRepository';
import { OAuthUserInfo } from './types';

export class OAuthService {
  constructor(private userRepo: UserRepository) {}

  async handleGitHubCallback(code: string): Promise<{ user: any; token: string }> {
    const githubUser = await this.fetchGitHubUser(code);
    const primaryEmail = await this.getGitHubPrimaryEmail(code);
    
    let user = await this.userRepo.findByEmail(primaryEmail);
    
    if (!user) {
      user = await this.createUserFromGitHub(githubUser, primaryEmail);
      if (user) {
        await this.userRepo.updateGitHubId(user.id, githubUser.id);
      }
    } else if (!user.github_id) {
      await this.userRepo.updateGitHubId(user.id, githubUser.id);
    }

    if (user) {
      await this.userRepo.updateOnlineStatus(user.id, true);
    }
    
    return { user, token: '' }; // Token will be generated by controller
  }

  async handleGoogleCallback(code: string): Promise<{ user: any; token: string }> {
    const googleUser = await this.fetchGoogleUser(code);
    
    let user = await this.userRepo.findByGoogleId(googleUser.id);
    
    if (!user) {
      user = await this.userRepo.findByEmail(googleUser.email);
      
      if (user) {
        await this.userRepo.updateGoogleId(user.id, googleUser.id);
      } else {
        user = await this.createUserFromGoogle(googleUser);
      }
    }

    if (user) {
      await this.userRepo.updateOnlineStatus(user.id, true);
    }
    
    return { user, token: '' }; // Token will be generated by controller
  }

  private async fetchGitHubUser(code: string): Promise<OAuthUserInfo> {
    const tokenResponse = await fetch('https://github.com/login/oauth/access_token', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        client_id: process.env.GITHUB_CLIENT_ID,
        client_secret: process.env.GITHUB_CLIENT_SECRET,
        code
      })
    });

    const tokenData = await tokenResponse.json();
    
    if (!tokenData.access_token) {
      throw new Error('GitHub authentication failed');
    }

    const userResponse = await fetch('https://api.github.com/user', {
      headers: {
        'Authorization': `Bearer ${tokenData.access_token}`,
        'Accept': 'application/json'
      }
    });

    return await userResponse.json();
  }

  private async getGitHubPrimaryEmail(code: string): Promise<string> {
    const tokenResponse = await fetch('https://github.com/login/oauth/access_token', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        client_id: process.env.GITHUB_CLIENT_ID,
        client_secret: process.env.GITHUB_CLIENT_SECRET,
        code
      })
    });

    const tokenData = await tokenResponse.json();
    
    const emailResponse = await fetch('https://api.github.com/user/emails', {
      headers: {
        'Authorization': `Bearer ${tokenData.access_token}`,
        'Accept': 'application/json'
      }
    });

    const emails = await emailResponse.json();
    const primaryEmail = emails.find((email: any) => email.primary)?.email;
    
    if (!primaryEmail) {
      throw new Error('Could not retrieve GitHub email');
    }
    
    return primaryEmail;
  }

  private async fetchGoogleUser(code: string): Promise<OAuthUserInfo> {
    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: new URLSearchParams({
        client_id: process.env.GOOGLE_CLIENT_ID!,
        client_secret: process.env.GOOGLE_CLIENT_SECRET!,
        code,
        grant_type: 'authorization_code',
        redirect_uri: process.env.GOOGLE_REDIRECT_URI || 'http://localhost:8000/api/auth/google/callback'
      })
    });

    const tokenData = await tokenResponse.json();
    
    if (!tokenData.access_token) {
      throw new Error('Google authentication failed');
    }

    const userResponse = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
      headers: {
        'Authorization': `Bearer ${tokenData.access_token}`
      }
    });

    const googleUser = await userResponse.json();
    
    if (!googleUser.email) {
      throw new Error('Could not retrieve Google email');
    }

    return googleUser;
  }

  private async createUserFromGitHub(githubUser: any, email: string): Promise<any> {
    return await this.userRepo.create({
      username: githubUser.login,
      email,
      password: this.generateSecurePassword(),
      display_name: githubUser.name || githubUser.login,
      avatar_url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=default&backgroundColor=b6e3f4',
      data_consent: true
    });
  }

  private async createUserFromGoogle(googleUser: any): Promise<any> {
    return await this.userRepo.create({
      username: googleUser.email.split('@')[0],
      email: googleUser.email,
      password: this.generateSecurePassword(),
      display_name: googleUser.name || googleUser.email.split('@')[0],
      avatar_url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=default&backgroundColor=b6e3f4',
      google_id: googleUser.id,
      data_consent: true
    });
  }

  private generateSecurePassword(): string {
    return require('crypto').randomBytes(32).toString('hex');
  }
}